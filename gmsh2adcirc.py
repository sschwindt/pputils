#!/usr/bin/env python3
#
# +!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#                                                                       #
#                                 gmsh2adcirc.py                        # 
#                                                                       #
# +!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#
# Author: Pat Prodanovic, Ph.D., P.Eng., modularized by Sebastian Schwindt
# 
# Date: June 26, 2015 / July 28, 2022

import os
import numpy as np


# verification function for counter-clockwise (CCW) orientation
def CCW(x1, y1, x2, y2, x3, y3):
    return (y3 - y1) * (x2 - x1) > (y2 - y1) * (x3 - x1)


def gmsh2adcirc(gmsh_msh="out.msh", adcirc_grd="out.grd"):
    """ Function takes a file generated by the gmsh mesh generator, and converts it to ADCIRC mesh format

    :param str gmsh_msh: full path and *.msh file name generated by gmsh
    :param str adcirc_grd: full path and *.grd adcirc geometry mesh file
    :return None: writes adcirc grid file (boundary nodes are not written)
    """
    # create output file
    fout = open(adcirc_grd, "w")
    target_dir = os.path.dirname(os.path.abspath(adcirc_grd)) + "/"
    if not os.path.isdir(target_dir):
        print("WARNING: the target directory (%s) is not a does not exist -> I attempt to create it ...")
        try:
            os.mkdir(target_dir)
        except:
            print("ERROR: cannot create directory (check directory name, read and write rights). Leaving program.")

    # read the *.msh file as string and clip of the stuff that is not needed (each line in the file is a list object)
    line = list()
    with open(gmsh_msh, "r") as f1:
        for i in f1:
            line.append(i)

    # extract nodes and 2d elements, and write them to a temp file

    temp_nodes_file = target_dir + "temp_nodes"
    temp_elements_file = target_dir + "temp_elements"
    fout_nodes = open(temp_nodes_file, "w")
    fout_elements = open(temp_elements_file, "w")

    # read how many nodes are in the file (stated in line 5 of the *.gmsh file)
    n = line[4]  # it is a string
    try:
        n = int(n)  # now it becomes an integer
    except ValueError:
        print("ERROR: Cannot convert node number to integer (check line 5 in %s)" % str(gmsh_msh))
        return -1

    # read the next n lines in the nodes file
    for i in range(5, 5 + n):
        fout_nodes.write(line[i])

    # the next two lines are
    # $EndNodes
    # $Elements

    # get the number of elements
    e = line[5 + n + 2]
    try:
        e = int(e)
    except ValueError:
        print("ERROR: Cannot convert element number to integer (check end of node lines in %s)" % str(gmsh_msh))
        return -1

    for i in range(5 + n + 3, 5 + n + 3 + e):
        # write only  2d elements (i.e., if there are 7 blanks in the line)
        if line[i].count(' ') == 7:
            fout_elements.write(line[i])

    fout_nodes.close()
    fout_elements.close()

    # Next: open the nodes and elements files as numpy arrays
    # each column in the file is a row read with np.loadtxt
    nodes_data = np.genfromtxt(temp_nodes_file, unpack=True)
    elements_data = np.genfromtxt(temp_elements_file, unpack=True)

    # nodes
    node_id = nodes_data[0, :]
    node_id = node_id.astype(np.int32)
    x = nodes_data[1, :]
    y = nodes_data[2, :]
    z = nodes_data[3, :]

    # elements
    e1 = elements_data[5, :]
    e1 = e1.astype(np.int32)
    e2 = elements_data[6, :]
    e2 = e2.astype(np.int32)
    e3 = elements_data[7, :]
    e3 = e3.astype(np.int32)

    # write the adcirc mesh file
    fout.write("ADCIRC" + "\n")
    # write the number of elements and number of nodes in the header file
    fout.write(str(len(e1)) + " " + str(len(node_id)) + "\n")

    # make sure the elements are oriented CCW (counter clock wise)
    ikle = np.column_stack((e1, e2, e3))
    # iteratre on elements and make sure they are CCW-oriented
    for i in range(len(ikle)):
        # if the element is not CCW, it must change its orientation
        if not CCW(x[ikle[i, 0] - 1], y[ikle[i, 0] - 1], x[ikle[i, 1] - 1], y[ikle[i, 1] - 1],
                   x[ikle[i, 2] - 1], y[ikle[i, 2] - 1]):
            t0 = ikle[i, 0]
            t1 = ikle[i, 1]
            t2 = ikle[i, 2]
            # switch orientation
            ikle[i, 0] = t2
            ikle[i, 2] = t0

    # write nodes
    for i in range(0, len(node_id)):
        fout.write(str(node_id[i]) + " " + str("{:.3f}".format(x[i])) + " " +
                   str("{:.3f}".format(y[i])) + " " + str("{:.3f}".format(z[i])) + "\n")

    # write elements
    for i in range(0, len(e1)):
        fout.write(str(i + 1) + " 3 " + str(ikle[i, 0]) + " " + str(ikle[i, 1]) + " " +
                   str(ikle[i, 2]) + "\n")

    # delete the temp file
    os.remove(temp_nodes_file)
    os.remove(temp_elements_file)
