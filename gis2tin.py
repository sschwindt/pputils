#!/usr/bin/env python3
#
# +!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#                                                                       #
#                                 gis2tin.py                            # 
#                                                                       #
# +!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#
# Author: Pat Prodanovic, Ph.D., P.Eng., modularized by Sebastian Schwindt
# 
# Date: February 2, 2016 / July 22, 2022


import os, sys
from gis2triangle import gis2triangle
from triangle2adcirc import triangle2adcirc
from adcirc2wkt import adcirc2wkt
import subprocess


def gis2tin(nodes_csv, boundary_csv, lines_csv=None, out_grd="out.grd", holes_csv=None):
    """ Calls triangle to create the tin (from gis2triangle.py) and converts the adcirc to tin (from triangle2adcirc.py).

    :param str nodes_csv: full path to and name of nodes CSV file. The nodes file consist of x,y,z or x,y,z,size; The
                          size parameter is an optional input, and is used by gmsh as an extra parameter that forces
                          an element size around particular nodes (not relevant for triangle). The nodes file must be
                          comma separated, and have no header lines.
    :param str boundary_csv: full path to and name of boundary CSV file. The boundary file is represents a closed line
                          around nodes.csv the first and last nodes are identical. It has the columns shapeid,x,y of
                          for all lines in the file. The boundary is defined with a distinct id (i.e., shapeid of 0).
    :param str lines_csv: full path to and name of lines CSV file. The lines file can include open or closed polylines.
                          The file has the columns shapeid,x,y, where x,y have to match nodes.csv. Every line has to
                          have an individual (integer) shapeid. If no constraint lines are in the mesh, use the default
                          value of ``None``.
    :param str out_grd: name of output adcirc grid file (will be saved to where nodes_csv lives) containing the TIN.
    :param str holes_csv: optional full path to and name of holes CSV file (default is ``None``). The holes file is
                          generated by placing a single node marker inside a closed line constraint. The holes file must
                          include x and y coordinates within the hole boundary. If the mesh does not have any holes
                          (islands) skip this argument. Note that a triangle hole has a different format than gmsh.
    :return:
    """

    pputils_path = os.path.dirname(os.path.realpath(__file__)) + "/"

    # Tell the user what is going on
    print("Constructing Triangle poly file ...")
    gis2triangle(nodes_csv, boundary_csv, lines_csv=lines_csv, out_poly="tin.poly", holes_csv=holes_csv)

    print('Generating TIN using Triangle ...')
    if os.name == 'posix':
        # go here for linux32 (i686), linux64 (x86_64), and raspberry pi 32 its armv7l
        # determines processor type
        proctype = os.uname()[4][:]

        # this assumes chmod +x has already been applied to the binaries
        if proctype == "i686":
            call_code = "triangle_32"
        elif proctype == 'x86_64':
            call_code = "triangle_64"
        elif proctype == 'armv7l':
            call_code = "triangle_pi32"
        subprocess.call(["chmod +x", pputils_path + "/triangle/bin/" + call_code])
        subprocess.call([pputils_path + "/triangle/bin/" + call_code, "tin.poly"])
    elif os.name == 'nt':
        subprocess.call(['.\\triangle\\bin\\triangle_32.exe', 'tin.poly'])
    else:
        print('Operating System not supported!')
        print('Exiting!')
        sys.exit()

    # call triangle2adcirc.py
    print("Converting TIN from Triangle to ADCIRC format ...")
    triangle2adcirc(nodes_file="tin.1.node", elements_file="tin.1.ele", output_file=out_grd)

    # construct the output wkt file
    wkt_file = out_grd.rsplit('.', 1)[0] + '_WKT.csv'

    # now convert the *.grd file to a *.wkt file by calling adcirc2wkt.py
    print('Converting TIN from ADCIRC to WKT format ...')
    adcirc2wkt(adcirc_file=out_grd, output_file=wkt_file)

    # to remove the temporary files
    os.remove('tin.poly')
    os.remove('tin.1.poly')
    os.remove('tin.1.node')
    os.remove('tin.1.ele')

    print('All done!')
